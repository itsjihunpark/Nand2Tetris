// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:

    //Logic for zx
    Mux16(a=x, b=false, sel=zx, out=step01XOut); //if zx=1 step01XOut=false

    //Logic for nx
    Not16(in=step01XOut, out=outNx);  
    Mux16(a=step01XOut, b=outNx, sel=nx, out=step02XOut); //if nx=1 step02XOut=outNx

    //Logic for zy
    Mux16(a=y, b=false, sel=zy, out=step01YOut); //if zy=1 step01YOut=false 

    //Logic for ny
    Not16(in=step01YOut, out=outNy);
    Mux16(a=step01YOut, b=outNy, sel=ny, out=step02YOut); //if ny=1 step02YOut=outNy

    //Logic for f: if f==1
    Add16 (a=step02XOut, b=step02YOut, out=outAdd);
    //Logic for f: if f==0
    And16 (a=step02XOut, b=step02YOut, out=outAnd);
    Mux16(a=outAnd, b=outAdd, sel=f, out=step03Outs); //if f=1 step03Outs=outAdd else step03Outs=outAnd

    //Logic for no: if no=1
    Not16(in=step03Outs, out=outN);
    Mux16(a=step03Outs, b=outN, sel=no, out[0..7]=LSB, out[8..15]=MSB, out[15]=signBit, out=out); // if no=1 out=outN else out=step03Out
    //Logic for zr = (out == 0, 1, 0)
    Or8Way(in=LSB, out=orLSB);
    Or8Way(in=MSB, out=orMSB);
    Or(a=orLSB, b=orMSB, out=zrTemp);
    Not(in=zrTemp, out=zr);

    // Logic for ng = (out < 0,  1, 0)
    And (a=true, b=signBit, out=ng);
    }