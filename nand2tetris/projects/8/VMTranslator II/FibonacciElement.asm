@256
D=A
@SP
M=D
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
D=A
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
//C_FUNCTION arg1: Sys.init arg2: 0 function Sys.init 0
(Sys.init)
//C_PUSH arg1: constant arg2: 4 push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M67+1
//C_CALL arg1: Main.fibonacci arg2: 1 call Main.fibonacci 1
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
D=A
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
//C_LABEL arg1: END arg2: None label END
(Sys.init$END)
//C_GOTO arg1: END arg2: None goto END
@Sys.init$END
0;JMP
//C_FUNCTION arg1: Main.fibonacci arg2: 0 function Main.fibonacci 0
(Main.fibonacci)
//C_PUSH arg1: argument arg2: 0 push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_PUSH arg1: constant arg2: 2 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//C_ARITHMETIC arg1: lt arg2: None lt
@SP
M=M-1
A=M
D=M
@13
M=D
@SP
M=M-1
A=M
D=M
@14
M=D
//LT
@13  // Y
D=M
@14 // X
D=M-D
@LT0
D;JLT
D=0
@ENDLT0
0;JMP
(LT0)
D=-1
(ENDLT0)
@14
M=D
@14
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_IF arg1: N_LT_2 arg2: None if-goto N_LT_2
@SP
M=M-1
A=M
D=M
@13
M=D
@13
D=M
@Main.fibonacci$N_LT_2
D;JNE
//C_GOTO arg1: N_GE_2 arg2: None goto N_GE_2
@Main.fibonacci$N_GE_2
0;JMP
//C_LABEL arg1: N_LT_2 arg2: None label N_LT_2
(Main.fibonacci$N_LT_2)
//C_PUSH arg1: argument arg2: 0 push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_RETURN arg1: None arg2: None return
//frame = LCL
@LCL
D=M
@13 // frame
M=D
//retAddr = frame-5
@5
D=A
@13
D=M-D
@14 // retAddr
M=D
@SP
M=M-1
A=M
D=M
@15
M=D
@15
D=M
@ARG
A=M
M=D
//SP = ARG+1
@ARG
D=M
@SP
M=D+1
//THAT = *frame-1
@13
D=M-1
A=D
D=M
@THAT
M=D
//THIS = *frame-2
@13
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
//ARG = *frame-3
@13
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
//LCL = *frame-4
@13
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
//goto retAddr
@14
A=M
0;JMP
//C_LABEL arg1: N_GE_2 arg2: None label N_GE_2
(Main.fibonacci$N_GE_2)
//C_PUSH arg1: argument arg2: 0 push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_PUSH arg1: constant arg2: 2 push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//C_ARITHMETIC arg1: sub arg2: None sub
@SP
M=M-1
A=M
D=M
@13
M=D
@SP
M=M-1
A=M
D=M
@14
M=D
//SUB
@13 // Y
D=M
@14 // X
M=M-D
@14
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_CALL arg1: Main.fibonacci arg2: 1 call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
D=A
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
//C_PUSH arg1: argument arg2: 0 push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_PUSH arg1: constant arg2: 1 push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//C_ARITHMETIC arg1: sub arg2: None sub
@SP
M=M-1
A=M
D=M
@13
M=D
@SP
M=M-1
A=M
D=M
@14
M=D
//SUB
@13 // Y
D=M
@14 // X
M=M-D
@14
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_CALL arg1: Main.fibonacci arg2: 1 call Main.fibonacci 1
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
A=M
D=A
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
//C_ARITHMETIC arg1: add arg2: None add
@SP
M=M-1
A=M
D=M
@13
M=D
@SP
M=M-1
A=M
D=M
@14
M=D
//ADD
@13 // Y
D=M
@14 // X
M=M+D
@14
D=M
@SP
A=M
M=D
@SP
M=M+1
//C_RETURN arg1: None arg2: None return
//frame = LCL
@LCL
D=M
@13 // frame
M=D
//retAddr = frame-5
@5
D=A
@13
D=M-D
@14 // retAddr
M=D
@SP
M=M-1
A=M
D=M
@15
M=D
@15
D=M
@ARG
A=M
M=D
//SP = ARG+1
@ARG
D=M
@SP
M=D+1
//THAT = *frame-1
@13
D=M-1
A=D
D=M
@THAT
M=D
//THIS = *frame-2
@13
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
//ARG = *frame-3
@13
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
//LCL = *frame-4
@13
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
//goto retAddr
@14
A=M
0;JMP
